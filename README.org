#+TITLE: project-checker.el

* project-checker.el

A package that provides automatic project-wide and file-specific checks in Emacs.

[[./screenshots/screenshot1.png]]

[[./screenshots/screenshot2.png]]

** Overview

=project-checker= is a package designed to enhance development workflows—especially for TypeScript projects—by providing diagnostics that eglot + flymake cannot obtain. It also displays test results from tools like Jest directly in Emacs and allows jumping to error locations.

*** Key Features

- Automatic checks (linting, formatting, etc.) on file save
- Manual project-wide checks (tests, full-project linting)
- Integration with Emacs =compilation-mode= for error navigation
- Project-specific configuration via =.dir-locals.el=
- Supports arbitrary shell commands and build tools

*** Motivation

- In TypeScript projects, eglot + flymake cannot retrieve diagnostics for unopened files; this tool retrieves full-project diagnostics
- Display Jest results directly in Emacs and enable jumping to failing test locations
- Projects often use different tools/libraries (e.g., Jest, Vitest), requiring flexible configuration via =.dir-locals.el=

** Installation

*** Manual Installation

1. Download =project-checker.el= and place it in your =load-path=
2. Add the following to your =init.el=:

#+BEGIN_SRC emacs-lisp
  (require 'project-checker)
  (add-hook 'prog-mode-hook 'project-checker-mode)
#+END_SRC

*** Using use-package

#+BEGIN_SRC emacs-lisp
  (use-package project-checker
    :vc (:url "https://github.com/kn66/project-checker.el"
         :rev :newest)
    :hook (prog-mode . project-checker-mode)
    :init
    ;; Set safe variables to avoid warnings
    (setopt safe-local-variable-values
            '((project-checker-project-commands . ("npx tsx --noEmit"
                                                   "npx eslint ./src"
                                                   "npx jest --passWithNoTests --silent"))
              (project-checker-file-commands . ("npx eslint %S"
                                                "npx jest %b.test.ts --passWithNoTests --silent --no-coverage")))))
#+END_SRC

** Basic Usage

*** 1. Enable the Mode

Activate =project-checker-mode= in your programming buffer:

#+BEGIN_SRC emacs-lisp
  M-x project-checker-mode
#+END_SRC

*** 2. Configure Commands

Set commands via =.dir-locals.el= or buffer-local variables.

*** 3. Automatic Checks

File-specific commands are automatically executed upon file save.

*** 4. Project-wide Checks

#+BEGIN_SRC emacs-lisp
  M-x project-checker-run-project-commands
#+END_SRC

** Configuration

*** Project-specific Configuration (Recommended)

Create a =.dir-locals.el= file in your project root:

**** Example: TypeScript + Jest Project

#+BEGIN_SRC emacs-lisp
  ((nil . ((project-checker-project-commands . ("npx tsx --noEmit"
                                                "npx eslint ./src"
                                                "npx jest --passWithNoTests --silent"))
           (project-checker-file-commands . ("npx eslint %S"
                                             "npx jest %b.test.ts --passWithNoTests --silent --no-coverage")))))
#+END_SRC

**** Example: Vue.js Project (Unverified)

#+BEGIN_SRC emacs-lisp
  ((nil . ((project-checker-project-commands . ("npm run test:unit"
                                                "npm run lint"
                                                "vue-tsc --noEmit"))
           (project-checker-file-commands . ("npx eslint %S")))))
#+END_SRC

**** Example: Python Project (Unverified)

#+BEGIN_SRC emacs-lisp
  ((nil . ((project-checker-project-commands . ("python -m pytest"
                                                "flake8"
                                                "mypy ."))
           (project-checker-file-commands . ("flake8 %s"
                                             "mypy %s")))))
#+END_SRC

** File Placeholders

The following placeholders can be used in file command templates:

| Placeholder | Description                             | Example                                  |
|-------------+-----------------------------------------+------------------------------------------|
| =%s=        | Relative path from project root         | =src/components/Button.tsx=              |
| =%n=        | Relative path without extension         | =src/components/Button=                  |
| =%b=        | Base name (no directory, no extension)  | =Button=                                 |
| =%d=        | Relative directory path                 | =src/components/=                        |
| =%S=        | Absolute path                           | =/home/user/project/src/Button.tsx=      |
| =%N=        | Absolute path without extension         | =/home/user/project/src/Button=          |
| =%D=        | Absolute directory path                 | =/home/user/project/src/components/=     |

** Commands

*** Interactive Commands

- =M-x project-checker-mode= : Toggle the minor mode
- =M-x project-checker-run-project-commands= : Manually run project-wide checks

*** Integration with Compilation-mode

Since results are shown in =compilation-mode=, the following commands can be used for navigation:

- =M-x next-error= (=C-x `=) : Jump to the next error
- =M-x previous-error= : Jump to the previous error
- =M-x first-error= : Jump to the first error

** Custom Variables

*** =project-checker-project-commands=

List of shell commands for project-wide checks.

*** =project-checker-file-commands=

List of command templates for file-specific checks.

